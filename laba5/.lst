     1                                  %include "../lib64.asm"
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохран€ем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнул€ем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нул€
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" Ц ќшибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом дев€ти 
    56 0000006F 772B                <1>          ja     .Error  ; "выше" Ц ќшибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расшир€ем до слова
    59 00000075 6650                <1>          push   ax      ; сохран€ем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI Ц очередна€ цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI Ц накопленное число        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                      
     3                                  section .bss
     4 00000000 ??                          count resb 1
     5 00000001 ????????                    vowels resd 1
     6                                      
     7                                  section .text
     8                                      global vow_count
     9                                          vow_count:
    10 000000A9 C60425[00000000]00                  mov BYTE [count], 0
    11                                              
    12 000000B1 31C0                                xor eax, eax
    13 000000B3 AC                                  lodsb
    14                                              browse_string:
    15 000000B4 83F800                                  cmp eax, 0
    16 000000B7 7431                                    je end
    17 000000B9 4889F3                                      mov rbx, rsi            ; i
    18 000000BC 4831F6                                      xor rsi, rsi
    19 000000BF 4889FE                                      mov rsi, rdi            ; vowels   
    20 000000C2 89C2                                        mov edx, eax            ; line[i]
    21                                                      
    22 000000C4 B90D000000                                  mov ecx, 13             ; count of vowels
    23 000000C9 AC                                          lodsb                   ; vowels[j]
    24                                                      comparing:
    25 000000CA 83F900                                          cmp ecx, 0
    26 000000CD FFC9                                                dec ecx
    27 000000CF 7410                                                je next_itertion
    28 000000D1 39D0                                                    cmp eax, edx    ; vowels[i] == line[i]
    29 000000D3 7509                                                        jne shift
    30 000000D5 FE0425[00000000]                                            inc BYTE [count]
    31 000000DC EB03                                                        jmp next_itertion
    32                                                                  shift:
    33 000000DE AC                                                          lodsb
    34 000000DF EBE9                                                        jmp comparing
    35                                                               
    36                                                      next_itertion:
    37 000000E1 4831F6                                          xor rsi, rsi
    38 000000E4 4889DE                                          mov rsi, rbx
    39 000000E7 AC                                              lodsb
    40 000000E8 EBCA                                    jmp browse_string
    41                                              
    42                                              end:
    43 000000EA 8A0425[00000000]                        mov al, BYTE [count]
    44 000000F1 C3                                      ret
    45                                  
